using Dapper;
using Newtonsoft.Json;
using Npgsql;

namespace Tests;

public static class Helper
{
    public static readonly Uri Uri = new Uri("postgres://tczulatt:ndNH_gbumDWCNytD3QCUsPt8vsHLEK7i@snuffleupagus.db.elephantsql.com/tczulatt");

    public static readonly string
        ProperlyFormattedConnectionString = string.Format(
            "Server={0};Database={1};User Id={2};Password={3};Port={4};Pooling=true;MaxPoolSize=3",
            Uri.Host,
            Uri.AbsolutePath.Trim('/'),
            Uri.UserInfo.Split(':')[0],
            Uri.UserInfo.Split(':')[1],
            Uri.Port > 0 ? Uri.Port : 5432);

    public static readonly NpgsqlDataSource DataSource =
        new NpgsqlDataSourceBuilder(ProperlyFormattedConnectionString).Build();

    public static void TriggerRebuild()
    {
        using (var conn = DataSource.OpenConnection())
        {
            conn.Execute(RebuildScript);
        }
    }

    public static string MyBecause(object actual, object expected)
    {
        string expectedJson = JsonConvert.SerializeObject(expected, Formatting.Indented);
        string actualJson = JsonConvert.SerializeObject(actual, Formatting.Indented);

        return $"because we want these objects to be equivalent:\nExpected:\n{expectedJson}\nActual:\n{actualJson}";
    }

    public static string RebuildScript = $@"
DROP SCHEMA IF EXISTS library CASCADE;
CREATE SCHEMA library;
create sequence library.booksidseq;

create sequence library.booksbookidseq
    as integer;

create sequence library.authorsauthoridseq
    as integer;

create sequence library.booksbookidseq1
    as integer;

create sequence library.authorsauthoridseq1
    as integer;

create sequence library.books_bookid_seq
    as integer;

create table if not exists library.books
(
    bookid      integer generated by default as identity,
    title       text,
    publisher   text,
    coverimgurl text,
    primary key (bookid)
);

alter sequence library.booksidseq owned by library.books.bookid;

create index if not exists booksidtitleindex
    on library.books (bookid, title);

 ";
}